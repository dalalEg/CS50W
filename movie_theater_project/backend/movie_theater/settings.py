"""
Django settings for movie_theater project.

Generated by 'django-admin startproject' using Django 5.1.6.
"""

import os
from pathlib import Path
import dj_database_url
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------
# Environment
# ------------------------------------------------------------------------------
ENVIRONMENT = os.getenv("DJANGO_ENV", "development")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-#6ia8v+dyaago@ylz$!2a2ak$-1r!^nmyf_b%%@rey8f^ud*sh")

# ------------------------------------------------------------------------------
# Allowed hosts & origins
# ------------------------------------------------------------------------------
LOCAL_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://react_app:3000",  # React container (Docker)
]

PRODUCTION_ORIGINS = [
    "https://movie-theater-dots.onrender.com",  # Backend (Render)
    "https://68b9db2a7e02be00087d3838--dali-movie-theater.netlify.app",  # Netlify frontend4
    "https://dali-movie-theater.netlify.app",  # Netlify frontend
]

if ENVIRONMENT == "development":
    DEBUG = True
    CORS_ALLOWED_ORIGINS = LOCAL_ORIGINS
    CSRF_TRUSTED_ORIGINS = LOCAL_ORIGINS
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
else:  # production
    DEBUG = False
    CORS_ALLOWED_ORIGINS = PRODUCTION_ORIGINS
    CSRF_TRUSTED_ORIGINS = PRODUCTION_ORIGINS
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    ALLOWED_HOSTS = [
        "movie-theater-dots.onrender.com",
        "https://dali-movie-theater.netlify.app",
    ]


CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SAMESITE = None
SESSION_COOKIE_SAMESITE = None

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------

BASE_DIR = Path(__file__).resolve().parent.parent

if os.getenv("RENDER", "false") == "true":
    # On Render → Postgres
    DATABASES = {
        "default": dj_database_url.config(
            default=os.getenv("DATABASE_URL")
        )
    }
else:
    # Local (even inside Docker) → SQLite
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ------------------------------------------------------------------------------
# Celery
# ------------------------------------------------------------------------------
USE_CELERY = os.getenv("USE_CELERY", "True").lower() == "true"
if USE_CELERY:
    if os.getenv("GITHUB_ACTIONS") == "true":
        CELERY_BROKER_URL = os.getenv("LOCAL_REDIS_URL", "redis://localhost:6379/0")
        CELERY_RESULT_BACKEND = os.getenv("LOCAL_REDIS_URL", "redis://localhost:6379/0")
    else:
        CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
        CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")

    CELERY_BEAT_SCHEDULE = {
        'send-showtime-reminders-every-24-hours': {
            'task': 'management.tasks.send_upcoming_showtime_reminders',
            'schedule': crontab(hour=0, minute=0),
        },
    }
else:
    CELERY_BROKER_URL = None
    CELERY_RESULT_BACKEND = None
    CELERY_BEAT_SCHEDULE = {}

CELERY_WORKER_CANCEL_LONG_RUNNING_TASKS_ON_CONNECTION_LOSS = False

# ------------------------------------------------------------------------------
# Django apps & middleware
# ------------------------------------------------------------------------------
AUTH_USER_MODEL = 'management.User'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'management.apps.ManagementConfig',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ]
}

# ------------------------------------------------------------------------------
# Static & media files
# ------------------------------------------------------------------------------
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

# ------------------------------------------------------------------------------
# Templates
# ------------------------------------------------------------------------------
ROOT_URLCONF = 'movie_theater.urls'
WSGI_APPLICATION = 'movie_theater.wsgi.application'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ------------------------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Default PK
# ------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ------------------------------------------------------------------------------
# Email
# ------------------------------------------------------------------------------
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
