services:
  backend:
    build: ./backend
    container_name: django_app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env.local
    depends_on:
      - db
      - redis
    networks:
      - app_network

  frontend:
    build: ./movie-theater-frontend
    container_name: react_app
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    depends_on:
      - backend
    env_file:
      - .env.local
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: django
      POSTGRES_PASSWORD: django
      POSTGRES_DB: movie_theater
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app_network

  redis:
    image: redis:7
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - app_network

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A movie_theater worker --loglevel=info
    env_file:
      - .env.local
    depends_on:
      - redis
      - backend   # make sure Django is up
    volumes:
      - ./backend:/app
    networks:
      - app_network
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A movie_theater beat --loglevel=info
    env_file:
      - .env.local
    depends_on:
      - redis
      - backend   # make sure Django is up
    volumes:
      - ./backend:/app
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge